{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import { ButtonBase, Grid, GridSpacing } from '@material-ui/core'\nimport React, { DispatchWithoutAction, FC, PropsWithChildren, useState } from 'react'\n\nexport type PropsOf<\n  TComponentOrTProps\n> = TComponentOrTProps extends React.ComponentType<infer TProps>\n  ? TProps\n  : TComponentOrTProps\n\nexport type Function<T, U> = (a: T) => U\nexport type Action1<T> = (a: T) => void\n\nexport type ChipSize = 'sm' | 'md' | 'lg'\nexport type ChipType =\n  | 'filled'\n  | 'outlined'\n  | 'filledOutlined'\n  | 'text'\n  | 'filledBold'\n\nconst useTypeToStyles: Function<\n  string,\n  Record<ChipType, React.CSSProperties>\n> = (color: string) => {\n  return {\n    text: { color: color },\n    filled: {\n      backgroundColor: `${color}26`,\n      color: color\n    },\n    outlined: {\n      boxShadow: `inset 0 0 0 1px ${color}`,\n      color: color\n    },\n    filledOutlined: {\n      backgroundColor: `${color}26`,\n      boxShadow: `inset 0 0 0 1px ${color}`,\n      color: color\n    },\n    filledBold: {\n      backgroundColor: color,\n      color: '#fff'\n    }\n  }\n}\n\nconst sizeToSpacing: Record<ChipSize, { padding: string; fontSize: number }> = {\n  sm: { padding: '0.25rem 0.75rem', fontSize: 12 },\n  md: { padding: '0.25rem 1rem', fontSize: 13 },\n  lg: { padding: '0.375rem 1.25rem', fontSize: 14 }\n}\n\nconst DivWrapper = ({ children, ...props }: PropsWithChildren<any>) => {\n  return <div {...props}>{children}</div>\n}\n\nexport const Chip = ({\n  color,\n  title,\n  size = 'md',\n  type = 'filled',\n  onClick\n}: {\n  color: string\n  title: string\n  size?: ChipSize\n  type?: ChipType\n  onClick?: DispatchWithoutAction\n}) => {\n  const styles = useTypeToStyles(color)\n  const Wrapper = onClick ? ButtonBase : DivWrapper\n  return (\n    <div style={{ display: 'flex' }}>\n      <Wrapper\n        style={{ ...styles[type], ...sizeToSpacing[size], borderRadius: 999 }}\n        onClick={onClick}\n      >\n        <span style={{}}>{title}</span>\n      </Wrapper>\n    </div>\n  )\n}\n\nexport const ChipsView = ({\n  chipsProps,\n  spacing = 2\n}: {\n  chipsProps: PropsOf<typeof Chip>[]\n  spacing?: GridSpacing\n}) => {\n  return (\n    <Grid container spacing={spacing} justifyContent='center'>\n      {chipsProps.map((props, index) => (\n        <Grid\n          item\n          key={index}\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}\n        >\n          <Chip {...props} />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nexport const useFilterView = <T,>(\n  chipsData: {\n    color: string\n    title: string\n    size?: ChipSize\n    id: T\n  }[],\n  config?: {\n    defaultAllOn?: boolean\n    defaultIdsOn?: T[]\n    typeOn?: ChipType\n    typeOff?: ChipType\n    spacing?: GridSpacing\n  }\n) => {\n  const isConfig = config !== undefined\n  const defaultAllOn = (isConfig && config!.defaultAllOn) || false\n  const defaultIdsOn = (isConfig && config!.defaultIdsOn) || false\n  const typeOn = (isConfig && config!.typeOn) || 'filledBold'\n  const typeOff = (isConfig && config!.typeOff) || 'outlined'\n  const spacing = (isConfig && config!.spacing) || 1\n\n  let on: T[] = []\n  if (defaultIdsOn) {\n    on = defaultIdsOn\n  } else if (defaultAllOn) {\n    on = chipsData.map((data) => data.id)\n  }\n\n  const [idsOn, setIdsOn] = useState<T[]>(on)\n\n  const onChipClick = (id: T) => {\n    let cloned = [...idsOn]\n    const index = idsOn.indexOf(id)\n    if (index > -1) {\n      setIdsOn((prev) => {\n        const next = [...prev]\n        next.splice(index, 1)\n        return next\n      })\n      cloned.splice(index, 1)\n    } else {\n      setIdsOn((prev) => [...prev, id])\n      cloned.push(id)\n    }\n    return cloned\n  }\n\n  const FilterView = ({\n    onClick,\n    className = ''\n  }: {\n    onClick?: Action1<T[]>\n    className?: string\n  }) => {\n    return (\n      <Grid container spacing={spacing} className={className}>\n        {chipsData.map((data, index) => (\n          <Grid item key={index}>\n            <Chip\n              color={data.color}\n              title={data.title}\n              size={data.size || 'md'}\n              type={idsOn.indexOf(data.id) > -1 ? typeOn : typeOff}\n              onClick={() => {\n                const newOn = onChipClick(data.id)\n                onClick?.(newOn)\n              }}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    )\n  }\n\n  return [idsOn, FilterView] as [\n    T[],\n    FC<{ onClick?: Action1<T[]>; className?: string }>\n  ]\n}\n"],"names":["useTypeToStyles","color","text","filled","backgroundColor","outlined","boxShadow","filledOutlined","filledBold","sizeToSpacing","sm","padding","fontSize","md","lg","DivWrapper","children","props","React","Chip","title","size","type","onClick","styles","Wrapper","ButtonBase","style","display","borderRadius","ChipsView","chipsProps","spacing","Grid","container","justifyContent","map","index","item","key","alignItems","useFilterView","chipsData","config","isConfig","undefined","defaultAllOn","defaultIdsOn","typeOn","typeOff","on","data","id","useState","idsOn","setIdsOn","onChipClick","cloned","indexOf","prev","next","splice","push","FilterView","className","newOn"],"mappings":"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"}