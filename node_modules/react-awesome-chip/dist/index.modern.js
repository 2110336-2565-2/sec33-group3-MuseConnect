import { Grid, ButtonBase } from '@material-ui/core';
import React, { useState } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var useTypeToStyles = function useTypeToStyles(color) {
  return {
    text: {
      color: color
    },
    filled: {
      backgroundColor: color + "26",
      color: color
    },
    outlined: {
      boxShadow: "inset 0 0 0 1px " + color,
      color: color
    },
    filledOutlined: {
      backgroundColor: color + "26",
      boxShadow: "inset 0 0 0 1px " + color,
      color: color
    },
    filledBold: {
      backgroundColor: color,
      color: '#fff'
    }
  };
};

var sizeToSpacing = {
  sm: {
    padding: '0.25rem 0.75rem',
    fontSize: 12
  },
  md: {
    padding: '0.25rem 1rem',
    fontSize: 13
  },
  lg: {
    padding: '0.375rem 1.25rem',
    fontSize: 14
  }
};

var DivWrapper = function DivWrapper(_ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return React.createElement("div", Object.assign({}, props), children);
};

var Chip = function Chip(_ref2) {
  var color = _ref2.color,
      title = _ref2.title,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 'md' : _ref2$size,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'filled' : _ref2$type,
      onClick = _ref2.onClick;
  var styles = useTypeToStyles(color);
  var Wrapper = onClick ? ButtonBase : DivWrapper;
  return React.createElement("div", {
    style: {
      display: 'flex'
    }
  }, React.createElement(Wrapper, {
    style: _extends({}, styles[type], sizeToSpacing[size], {
      borderRadius: 999
    }),
    onClick: onClick
  }, React.createElement("span", {
    style: {}
  }, title)));
};
var ChipsView = function ChipsView(_ref3) {
  var chipsProps = _ref3.chipsProps,
      _ref3$spacing = _ref3.spacing,
      spacing = _ref3$spacing === void 0 ? 2 : _ref3$spacing;
  return React.createElement(Grid, {
    container: true,
    spacing: spacing,
    justifyContent: 'center'
  }, chipsProps.map(function (props, index) {
    return React.createElement(Grid, {
      item: true,
      key: index,
      style: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
      }
    }, React.createElement(Chip, Object.assign({}, props)));
  }));
};
var useFilterView = function useFilterView(chipsData, config) {
  var isConfig = config !== undefined;
  var defaultAllOn = isConfig && config.defaultAllOn || false;
  var defaultIdsOn = isConfig && config.defaultIdsOn || false;
  var typeOn = isConfig && config.typeOn || 'filledBold';
  var typeOff = isConfig && config.typeOff || 'outlined';
  var spacing = isConfig && config.spacing || 1;
  var on = [];

  if (defaultIdsOn) {
    on = defaultIdsOn;
  } else if (defaultAllOn) {
    on = chipsData.map(function (data) {
      return data.id;
    });
  }

  var _useState = useState(on),
      idsOn = _useState[0],
      setIdsOn = _useState[1];

  var onChipClick = function onChipClick(id) {
    var cloned = [].concat(idsOn);
    var index = idsOn.indexOf(id);

    if (index > -1) {
      setIdsOn(function (prev) {
        var next = [].concat(prev);
        next.splice(index, 1);
        return next;
      });
      cloned.splice(index, 1);
    } else {
      setIdsOn(function (prev) {
        return [].concat(prev, [id]);
      });
      cloned.push(id);
    }

    return cloned;
  };

  var FilterView = function FilterView(_ref4) {
    var _onClick = _ref4.onClick,
        _ref4$className = _ref4.className,
        className = _ref4$className === void 0 ? '' : _ref4$className;
    return React.createElement(Grid, {
      container: true,
      spacing: spacing,
      className: className
    }, chipsData.map(function (data, index) {
      return React.createElement(Grid, {
        item: true,
        key: index
      }, React.createElement(Chip, {
        color: data.color,
        title: data.title,
        size: data.size || 'md',
        type: idsOn.indexOf(data.id) > -1 ? typeOn : typeOff,
        onClick: function onClick() {
          var newOn = onChipClick(data.id);
          _onClick === null || _onClick === void 0 ? void 0 : _onClick(newOn);
        }
      }));
    }));
  };

  return [idsOn, FilterView];
};

export { Chip, ChipsView, useFilterView };
//# sourceMappingURL=index.modern.js.map
